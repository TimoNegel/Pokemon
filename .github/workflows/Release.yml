name: Release

on:
  push:
    branches: [master]

jobs:
  release:
    runs-on: windows-latest

    env:
      Solution_Name: Pokemon/Pokemon.sln
      Publish_Directory: publish

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore and Build
      run: |
        dotnet restore ${{ env.Solution_Name }}
        dotnet build ${{ env.Solution_Name }} --configuration Release
      env:
        Configuration: Release

    - name: Publish Blazor Server Application
      run: dotnet publish ${{ env.Solution_Name }} --configuration Release --output ${{ env.Publish_Directory }}
      env:
        Configuration: Release

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Release Artifact
        path: ${{ env.Publish_Directory }}

    - name: Get latest tag
      id: get_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV

    - name: Increment version
      id: increment_version
      run: |
        latest_tag=${{ steps.get_tag.outputs.latest_tag }}
        IFS='.' read -r -a version_parts <<< "$latest_tag"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}
        new_patch=$((patch + 1))
        new_tag="$major.$minor.$new_patch"
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    - name: Create Tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ env.new_tag }}" -m "Release v${{ env.new_tag }}"
        git push origin "v${{ env.new_tag }}"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ env.new_tag }}
        release_name: Release v${{ env.new_tag }}
        body: |
          Release notes for v${{ env.new_tag }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
