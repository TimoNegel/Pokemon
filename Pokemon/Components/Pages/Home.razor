@page "/"
<style>
    .searchBar {
    width: 300px !important;
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 25px !important; }

    .mud-input.mud-input-filled {
    background-color: transparent !important;
    }

</style>
<PageTitle>Dashboard</PageTitle>

<MudAutocomplete class="searchBar" Variant="Variant.Filled" T="string" Placeholder="Pokemon nach ID oder Name suchen" SearchFunc="@SearchPokemon" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="@true" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />

<MudGrid Class="py-4">
    <MudItem Class="py-0" xs="12" sm="5">
        <MudSelect T="string" Label="Filter by types" MultiSelection="true" ValueChanged="FilterByType" @bind-SelectedValues="selectedTypes">
            <MudSelectItem Value="@("Normal")">Normal</MudSelectItem>
            <MudSelectItem Value="@("Fighting")">Fighting</MudSelectItem>
            <MudSelectItem Value="@("Flying")">Flying</MudSelectItem>
            <MudSelectItem Value="@("Poison")">Poison</MudSelectItem>
            <MudSelectItem Value="@("Ground")">Ground</MudSelectItem>
            <MudSelectItem Value="@("Rock")">Rock</MudSelectItem>
            <MudSelectItem Value="@("Bug")">Bug</MudSelectItem>
            <MudSelectItem Value="@("Ghost")">Ghost</MudSelectItem>
            <MudSelectItem Value="@("Steel")">Steel</MudSelectItem>
            <MudSelectItem Value="@("Fire")">Fire</MudSelectItem>
            <MudSelectItem Value="@("Water")">Water</MudSelectItem>
            <MudSelectItem Value="@("Grass")">Grass</MudSelectItem>
            <MudSelectItem Value="@("Electric")">Electric</MudSelectItem>
            <MudSelectItem Value="@("Psychic")">Psychic</MudSelectItem>
            <MudSelectItem Value="@("Ice")">Ice</MudSelectItem>
            <MudSelectItem Value="@("Dragon")">Dragon</MudSelectItem>
            <MudSelectItem Value="@("Dark")">Dark</MudSelectItem>
            <MudSelectItem Value="@("Fairy")">Fairy</MudSelectItem>
            <MudSelectItem Value="@("Stellar")">Stellar</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem Class="py-0" xs="12" sm="5">
        <MudSelect T="string" Label="Filter by generation" MultiSelection="true" @bind-SelectedValues="selectedGen">
            <MudSelectItem Value="@("xxx")">Gen 1</MudSelectItem>
            <MudSelectItem Value="@("xxx")">Gen 2</MudSelectItem>
            <MudSelectItem Value="@("xxx")">Gen 3</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="2" Class="d-flex py-0 justify-end">
        <MudText Typo="Typo.body2" Class="d-inline-block align-self-end">View:</MudText>
        <MudIconButton Size="Size.Small" Icon="@(CardListViewButtonIcon)" Color="Color.Inherit" OnClick="@(() => isCardView = !isCardView)" Class="d-inline-block align-self-end" />
    </MudItem>
</MudGrid>
@if(isCardView)
{
    <MudGrid>
        @foreach(PokemonModel model in (searchedPokemons.Any() ? searchedPokemons : filteredPokemons))
        {
            <MudItem xs="12" sm="6" md="4" lg="3" xl="2" @key="model.Id">
                <MudCard>
                    <MudCardMedia Image="@model.BildUrl" />
                    <MudCardContent Class="d-flex justify-between">
                        <MudText Typo="Typo.h6">@model.Name</MudText>
                        <MudText Typo="Typo.h6" Class="ml-auto">@($"#{model.Id}")</MudText>
                    </MudCardContent>
                    <MudCardActions Class="pl-4 pb-4">
                        <MudButton Class="@($"rounded-pill {model.Primärtyp.ToLower()}")" Variant="Variant.Filled">@model.Primärtyp</MudButton>
                        @if(!string.IsNullOrEmpty(model.Sekundärtyp))
                        {
                            <MudButton Class="@($"rounded-pill ml-5 {model.Sekundärtyp.ToLower()}")" Variant="Variant.Filled">@model.Sekundärtyp</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else
{
    <MudDataGrid T="PokemonModel" Items="@(searchedPokemons.Any() ? searchedPokemons : filteredPokemons)" Bordered="true">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Primärtyp" Title="Primärtyp" />
            <PropertyColumn Property="x => x.Sekundärtyp" Title="Sekundärtyp" />
            <PropertyColumn Property="x => x.Habitat" Title="Habitat" />
            <PropertyColumn Property="x => x.Hauptfähigkeit" Title="Hauptfähigkeit" />
            <PropertyColumn Property="x => x.VersteckteFähigkeit" Title="Versteckte Fähigkeit" />
            <PropertyColumn Property="x => x.KP" Title="KP" />
            <PropertyColumn Property="x => x.HP" Title="HP" />
            <PropertyColumn Property="x => x.Angriff" Title="Angriff" />
            <PropertyColumn Property="x => x.Verteidigung" Title="Verteidigung" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PokemonModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private IEnumerable<string> selectedTypes = new List<string>();
    private IEnumerable<string> selectedGen = new List<string>();
    private string searchString = string.Empty;

    private List<PokemonModel> pokemons = [];
    private List<PokemonModel> filteredPokemons = [];
    private List<PokemonModel> searchedPokemons = [];

    private bool isCardView = true;

    protected override async Task OnInitializedAsync()
    {
        await foreach(var pokemon in PokemonService.GetPokemonsDetailsAsync(386))
        {
            pokemons.Add(pokemon);
            filteredPokemons = pokemons;
            StateHasChanged();
        }
    }

    public string CardListViewButtonIcon => isCardView switch
    {
        true => Icons.Material.Filled.Dashboard,
        false => Icons.Material.Filled.ViewList
    };

    public void FilterByType()
    {
        if (selectedTypes.Count() == 0)
        {
            filteredPokemons = pokemons;
        }
        else
        {
            filteredPokemons = pokemons.Where(p => selectedTypes.Contains(p.Primärtyp) || selectedTypes.Contains(p.Sekundärtyp)).ToList();
        }
    }

    private async Task<IEnumerable<string>> SearchPokemon(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            searchedPokemons = [];
            StateHasChanged();
            return new string[0];
        }

        searchedPokemons = pokemons.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.Id == value.PadLeft(4, '0') || x.Id == value).ToList();
        StateHasChanged();
        return pokemons.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Name);
    }

}