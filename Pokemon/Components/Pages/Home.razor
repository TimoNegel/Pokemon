@page "/"

<PageTitle>Dashboard</PageTitle>

<MudGrid Class="py-4">
    <MudItem Class="py-0"xs="12" sm="5">
        <MudSelect T="string" Label="Filter by types" MultiSelection="true" ValueChanged="FilterByType" @bind-SelectedValues="selectedTypes">
            <MudSelectItem Value="@("normal")">Normal</MudSelectItem>
            <MudSelectItem Value="@("fighting")">Fighting</MudSelectItem>
            <MudSelectItem Value="@("flying")">Flying</MudSelectItem>
            <MudSelectItem Value="@("poison")">Poison</MudSelectItem>
            <MudSelectItem Value="@("ground")">Ground</MudSelectItem>
            <MudSelectItem Value="@("rock")">Rock</MudSelectItem>
            <MudSelectItem Value="@("bug")">Bug</MudSelectItem>
            <MudSelectItem Value="@("ghost")">Ghost</MudSelectItem>
            <MudSelectItem Value="@("steel")">Steel</MudSelectItem>
            <MudSelectItem Value="@("fire")">Fire</MudSelectItem>
            <MudSelectItem Value="@("water")">Water</MudSelectItem>
            <MudSelectItem Value="@("grass")">Grass</MudSelectItem>
            <MudSelectItem Value="@("electric")">Electric</MudSelectItem>
            <MudSelectItem Value="@("psychic")">Psychic</MudSelectItem>
            <MudSelectItem Value="@("ice")">Ice</MudSelectItem>
            <MudSelectItem Value="@("dragon")">Dragon</MudSelectItem>
            <MudSelectItem Value="@("dark")">Dark</MudSelectItem>
            <MudSelectItem Value="@("fairy")">Fairy</MudSelectItem>
            <MudSelectItem Value="@("stellar")">Stellar</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem Class="py-0"  xs="12" sm="5">
        <MudSelect T="string" Label="Filter by generation" MultiSelection="true" @bind-SelectedValues="selectedGen">
            <MudSelectItem Value="@("xxx")">Gen 1</MudSelectItem>
            <MudSelectItem Value="@("xxx")">Gen 2</MudSelectItem>
            <MudSelectItem Value="@("xxx")">Gen 3</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="2" Class="d-flex py-0 justify-end">
        <MudText Typo="Typo.body2" Class="d-inline-block align-self-end">View:</MudText>
        <MudIconButton Size="Size.Small" Icon="@(CardListViewButtonIcon)" Color="Color.Inherit" OnClick="@(() => isCardView = !isCardView)" Class="d-inline-block align-self-end" />
    </MudItem>
</MudGrid>

<MudGrid>
    <Virtualize Items="@filteredPokemons" Context="context">
        <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
            <MudCard>
                <MudCardMedia Image="@context.BildUrl" />
                <MudCardContent>
                    <MudText Typo="Typo.h6">@CapitalizeFirstLetter(context.Name)</MudText>
                </MudCardContent>
                <MudCardActions Class="pl-4 pb-4">
                    <MudButton Class="@($"rounded-pill {context.Primärtyp}")" Variant="Variant.Filled">@context.Primärtyp</MudButton>
                    @if(!string.IsNullOrEmpty(context.Sekundärtyp)){
                        <MudButton Class="@($"rounded-pill ml-5 {context.Sekundärtyp}")" Variant="Variant.Filled">@context.Sekundärtyp</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </Virtualize>
</MudGrid>

@code {
    private IEnumerable<string> selectedTypes = new List<string>();
    private IEnumerable<string> selectedGen = new List<string>();


    private List<PokemonModel> filteredPokemons = [];
    private List<PokemonModel> pokemons =[];

    private bool isCardView = true;

    protected override async Task OnInitializedAsync()
    {
        pokemons = await PokemonService.GetPokemonsDetailsAsync(12);
        filteredPokemons = pokemons;
    }


    public static string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }

    public string CardListViewButtonIcon => isCardView switch
    {
        true => Icons.Material.Filled.ViewList,
        false => Icons.Material.Filled.Dashboard
    };

    public void FilterByType()
    {
        if (selectedTypes.Count() == 0)
        {
            filteredPokemons = pokemons;
        }
        else
        {
            filteredPokemons = pokemons.Where(p => selectedTypes.Contains(p.Primärtyp) || selectedTypes.Contains(p.Sekundärtyp)).ToList();
        }
    }


}